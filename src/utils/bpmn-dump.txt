//Canvas - adding, removing elements, lifecycle, zoom, scroll
//EventBus - communication channel
//ElementFactory - for creating shapes and connections
//ElementRegistry - knows all elements and provides APIs for retrieving them by id
//GraphicsFactory - creating graphical representations
//Modeling - APIs for updating elements on canvas
//Overlays - APIs for attaching additional info to elements
//Palette
//moddle fromXML, toXML

// this.modeler.get("moddle").fromXML(); //xmlStr, typeName, options
// this.modeler.get("moddle").toXML(); //element, options
// this.modeler.get("moddle");

// this.modeler.get("commandStack").undo();
// this.modeler.get("commandStack").redo();
// this.modeler.get("commandStack").clear(); //clears the stack

this.modeler.get("elementRegistry").get(); // param string id //if not null - javi da treba drugi id
this.modeler.get("elementRegistry").getAll();
this.modeler.get("elementRegistry").getGraphics(); // param string id //selects the element - idea - search by id

this.modeler.get("canvas").getSize();
this.modeler.get("canvas").viewbox();
this.modeler.get("canvas").zoom(1);


			// this.eventBus.on("elements.changed", function(context) {
			// 	var elements = context.elements;
			// 	console.log(elements);
			// 	debugger;
			// });
			// this.eventBus.on("element.click", function(context) {
			// 	debugger;
			// 	var element = context.element;
			// 	console.log(element);
			// });

			// this.eventBus.on("element.hover", function(context) {
			// 	debugger;
			// 	var element = context.element;
			// 	console.log(element);
			// });

            			// this.eventBus.on("commandStack.changed", () => {
			// 	debugger;
			// 	self.setPropertyData();
			// });

		// async test() {
		// 	let modeling = this.modeler.get("modeling");
		// 	let moddle = this.modeler.get("moddle");
		// 	let elementRegistry = this.modeler.get("elementRegistry");
		// 	let bpmnFactory = this.modeler.get("bpmnFactory");
		// 	let e = elementRegistry.get("odabiranje_zadatka_student");
		// 	this.bpmnElement = e;
		// 	debugger;
		// 	let formData = BpmnXml.getExtension(e.businessObject, "camunda:formData");
		// 	//let extensionElements;
		// 	// if (formData) {
		// 	//     extensionElements = moddle.create('bpmn:ExtensionElements');
		// 	//     extensionElements.get('values').push(formData);
		// 	// }
		// 	//modeling.updateProperties(e, { extensionElements });
		// 	modeling;
		// 	bpmnFactory;
		// 	moddle;
		// 	let cs = this.modeler.get("commandStack");
		// 	cs.execute("bpmn-update", {
		// 		element: e,
		// 		businessObject: formData.$children[0],
		// 		properties: { label: "NEW LABEL!" },
		// 		//oldProperties: { label: 'asdfasdf' },
		// 	});
		// },


----- CAMUNDA CONNECTOR -> create
https://forum.bpmn.io/t/proper-way-to-create-and-update-activities-in-bpmn-js-modeler/4696

https://github.com/bpmn-io/bpmn-js-properties-panel/blob/master/src/provider/camunda-platform/utils/InputOutputUtil.js


.form-header-btn {
	margin-left: 0.5%;
	margin-bottom: 0.8%;
}
.icon-medium {
	height: 30px !important;
	font-size: 30px !important;
	width: 30px !important;
}